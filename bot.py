import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, constants
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
)
import html
from dotenv import load_dotenv


import ai_pipeline

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ ---
TELEGRAM_BOT_TOKEN = os.environ.get("BOT_TOKEN")
USE_LLM_GENERATION = os.environ.get(
    'USE_LLM_GENERATION', 'True').lower() == 'true'
USE_LLM_CLASSIFICATION = os.environ.get(
    'USE_LLM_CLASSIFICATION', 'True').lower() == 'true'
# LOG_CHANNEL_ID = os.environ.get("LOG_CHANNEL_ID")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–µ–ª–∞–µ–º —ç—Ç–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤–µ–∑–¥–µ) ---
log_level_str = os.environ.get("LOG_LEVEL", "INFO").upper()
log_level = getattr(logging, log_level_str, logging.INFO)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=log_level
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)


# # --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ –∫–∞–Ω–∞–ª ---
# async def send_to_log_channel(context: ContextTypes.DEFAULT_TYPE, message: str, parse_mode=None) -> None:
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
#     if not LOG_CHANNEL_ID:
#         logger.warning(
#             "LOG_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
#         return

#     try:
#         await context.bot.send_message(
#             chat_id=LOG_CHANNEL_ID,
#             text=message,
#             parse_mode=parse_mode
#         )
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–æ–º–∞–Ω–¥ ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n"
        f"–Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ü–æ—Ä—Ç–∞–ª—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    help_text = (
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "- –ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é?\n"
        "- –ù—É–∂–Ω–∞ –ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?\n"
        "- –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ø–æ—á–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
    )
    await update.message.reply_text(help_text)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –°–æ–æ–±—â–µ–Ω–∏–π ---

# async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     user_query = update.message.text
#     user = update.effective_user
#     chat_id = update.message.chat_id
#     logger.info(
#         f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user.id} ({user.username}): '{user_query}'")

#     # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª
#     log_question_message = (
#         f"üì• <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b>\n"
#         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {html.escape(user.full_name)} (ID: {user.id})\n"
#         f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{html.escape(user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
#         f"–í–æ–ø—Ä–æ—Å: <i>{html.escape(user_query)}</i>"
#     )
#     await send_to_log_channel(context, log_question_message, parse_mode="HTML")

#     retrieval_ok, generation_ok = ai_pipeline.get_ai_status()
#     # request_interaction_id = database.log_interaction(
#     #     user_telegram_id=user.id,
#     #     is_from_user=True,
#     #     message_text=user_query
#     # )

#     if not ai_pipeline.get_ai_status():
#         logger.error("AI Core –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –û—Ç–≤–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
#         error_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
#         # database.log_interaction(
#         #     user_telegram_id=user.id,
#         #     is_from_user=False,
#         #     message_text=error_text,
#         #     request_interaction_id=request_interaction_id  # –°–≤—è–∑—ã–≤–∞–µ–º —Å –∑–∞–ø—Ä–æ—Å–æ–º
#         # )

#         # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–∞–Ω–∞–ª
#         log_error_message = (
#             f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n"
#             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {html.escape(user.full_name)} (ID: {user.id})\n"
#             f"–ü—Ä–∏—á–∏–Ω–∞: AI Core –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n"
#             f"–û—Ç–≤–µ—Ç: <i>{html.escape(error_text)}</i>"
#         )
#         await send_to_log_channel(context, log_error_message, parse_mode="HTML")

#         await update.message.reply_text(error_text)
#         return

#     search_results = ai_pipeline.retrieve_context(user_query)

#     # --- –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç ---
#     if search_results:
#         # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#         best_result = search_results
#         response_parts = []
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
#         response_parts.append(
#             f"<blockquote>{best_result['text']}</blockquote>")  # –¶–∏—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç

#         response_text = "\n".join(response_parts)

#         # --- –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –û—Ü–µ–Ω–∫–∏ ---
#         keyboard = [
#             [
#                 InlineKeyboardButton(
#                     "üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_up_{best_result.get('id', 'no_id')}_{request_interaction_id}"),
#                 InlineKeyboardButton(
#                     "üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_down_{best_result.get('id', 'no_id')}_{request_interaction_id}"),
#             ]
#         ]
#         reply_markup = InlineKeyboardMarkup(keyboard)

#         # response_interaction_id = database.log_interaction(
#         #     user_telegram_id=user.id,
#         #     is_from_user=False,
#         #     message_text=response_text,  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
#         #     request_interaction_id=request_interaction_id,
#         #     matched_kb_id=best_result.get('id'),
#         #     similarity_score=best_result.get('similarity')
#         # )

#         # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª
#         log_answer_message = (
#             f"üì§ <b>–û—Ç–≤–µ—Ç –±–æ—Ç–∞</b>\n"
#             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {html.escape(user.full_name)} (ID: {user.id})\n"
#             f"–í–æ–ø—Ä–æ—Å: <i>{html.escape(user_query)}</i>\n"
#             f"–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç ID: {best_result.get('id', 'unknown')}\n"
#             f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {best_result.get('similarity', 0):.2f}\n"
#             f"–û—Ç–≤–µ—Ç: <i>{html.escape(response_text)}</i>"
#         )
#         await send_to_log_channel(context, log_answer_message, parse_mode="HTML")

#     # --- 1. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ---
#     query_category = "–î—Ä—É–≥–æ–µ"
#     if USE_LLM_CLASSIFICATION and generation_ok:
#         await context.bot.send_chat_action(chat_id=chat_id, action=constants.ChatAction.TYPING)
#         query_category = ai_pipeline.classify_query_type_with_llm(user_query)
#     elif not generation_ok:
#         query_category = "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"

#     # --- 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ---
#     # request_interaction_id = database.log_interaction(
#     #     user.id, True, user_query, query_category)

#     # --- 3. –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –æ—Ç–≤–µ—Ç ---
#     final_response_text = ""
#     kb_id_for_log = None
#     similarity_for_log = None
#     reply_markup = None
#     best_match_item = None  # –û–±—ä—è–≤–ª—è–µ–º –∑–¥–µ—Å—å

#     await context.bot.send_chat_action(chat_id=chat_id, action=constants.ChatAction.TYPING)

#     # --- –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ê: –ü–æ–∏—Å–∫ –≤ –ë–∞–∑–µ –ó–Ω–∞–Ω–∏–π (CSV/PDF) ---
#     if query_category in ai_pipeline.SEARCH_KB_CATEGORIES:
#         logger.info(
#             f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{query_category}' —Ç—Ä–µ–±—É–µ—Ç –ø–æ–∏—Å–∫–∞ –≤ –ë–ó (CSV/PDF).")
#         if not retrieval_ok:
#             final_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞)."
#         else:
#             best_match_item = ai_pipeline.retrieve_context(user_query)

#             if best_match_item:
#                 kb_id_for_log = best_match_item.get('id')
#                 similarity_for_log = best_match_item.get('similarity')
#                 data_type = best_match_item.get('data_type')
#                 source = best_match_item.get('source', '–ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π')
#                 # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–æ—Ç–≤–µ—Ç CSV –∏–ª–∏ —á–∞–Ω–∫ PDF)
#                 original_content = best_match_item.get('content', '')

#                 # --- –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –≤ CSV ---
#                 if data_type == 'csv':
#                     logger.info(
#                         f"–ù–∞–π–¥–µ–Ω –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ CSV (ID: {kb_id_for_log}).")
#                     paraphrased_answer = None
#                     # --- –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è ---
#                     if PARAPHRASE_CSV_ANSWERS and generation_ok:
#                         logger.info("–ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ CSV...")
#                         paraphrased_answer = ai_pipeline.paraphrase_text_with_llm(
#                             original_content)

#                     if paraphrased_answer:
#                         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
#                         logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.")
#                         response_parts = [
#                             f"–ù–∞—à–µ–ª –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ Q&A (—Å—Ö–æ–∂–µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞: {similarity_for_log:.2f}):",
#                             f"<blockquote>{telegram.helpers.escape_html(paraphrased_answer)}</blockquote>",
#                             f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}"
#                         ]
#                         final_response_text = "\n".join(response_parts)
#                     else:
#                         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (fallback)
#                         logger.info(
#                             "–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ CSV (–ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ).")
#                         response_parts = [
#                             f"–ù–∞—à–µ–ª –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ Q&A (—Å—Ö–æ–∂–µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞: {similarity_for_log:.2f}):",
#                             "<b>–û—Ç–≤–µ—Ç:</b>",
#                             f"<blockquote>{telegram.helpers.escape_html(original_content)}</blockquote>",
#                             f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}"
#                         ]
#                         final_response_text = "\n".join(response_parts)

#                 # --- –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —á–∞–Ω–∫ –≤ PDF ---
#                 elif data_type == 'pdf':
#                     logger.info(
#                         f"–ù–∞–π–¥–µ–Ω —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —á–∞–Ω–∫ PDF (ID: {kb_id_for_log}).")
#                     generated_answer = None
#                     # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç RAG
#                     if USE_LLM_GENERATION and generation_ok:
#                         logger.info(
#                             "–ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å RAG –æ—Ç–≤–µ—Ç –ø–æ PDF...")
#                         generated_answer = ai_pipeline.generate_answer_with_llm(
#                             user_query, best_match_item)

#                     if generated_answer:
#                         final_response_text = generated_answer
#                     else:
#                         # Fallback: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º —á–∞–Ω–∫ PDF
#                         logger.warning(
#                             "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç LLM –ø–æ PDF, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–∞–Ω–∫–∞.")
#                         response_parts = [f"–ù–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ '{source}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity_for_log:.2f}):",
#                                           f"<blockquote>{telegram.helpers.escape_html(original_content)}</blockquote>",
#                                           f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}"]
#                         final_response_text = "\n".join(response_parts)
#                 else:
#                     logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π data_type: {data_type}")
#                     final_response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞."

#             else:  # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–ó
#                 logger.info("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ CSV/PDF –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
#                 # ... (–∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ "–∏–∑ –≥–æ–ª–æ–≤—ã" –∏–ª–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
#                 if USE_LLM_GENERATION and generation_ok:
#                     final_response_text = ai_pipeline.generate_live_response_with_llm(
#                         user_query, "–î—Ä—É–≥–æ–µ")
#                     if final_response_text:
#                         final_response_text += "\n\n_(–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π)_"
#                     else:
#                         final_response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞."
#                 else:
#                     final_response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."

#     # --- –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ë: "–ñ–∏–≤–æ–µ" –æ–±—â–µ–Ω–∏–µ ---
#     else:
#         # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
#         logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{query_category}' —Ç—Ä–µ–±—É–µ—Ç '–∂–∏–≤–æ–≥–æ' –æ—Ç–≤–µ—Ç–∞.")
#         if USE_LLM_GENERATION and generation_ok:
#             final_response_text = ai_pipeline.generate_live_response_with_llm(
#                 user_query, query_category)
#             if not final_response_text:
#                 final_response_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏."
#         else:
#             # Fallback –±–µ–∑ LLM
#             if query_category == "–ñ–∞–ª–æ–±—ã":
#                 final_response_text = "..."
#             elif query_category == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
#                 final_response_text = "..."
#             else:
#                 final_response_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
#         response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å."
#         # --- –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ---
#         keyboard = [
#             [InlineKeyboardButton(
#                 "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", url="")]
#         ]
#         # –ò–ª–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å callback_data="ask_operator" –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ
#         reply_markup = InlineKeyboardMarkup(keyboard)

#         # response_interaction_id = database.log_interaction(
#         #     user_telegram_id=user.id,
#         #     is_from_user=False,
#         #     message_text=response_text,
#         #     request_interaction_id=request_interaction_id
#         # )

#         # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
#         log_no_answer_message = (
#             f"üîç <b>–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n"
#             f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {html.escape(user.full_name)} (ID: {user.id})\n"
#             f"–í–æ–ø—Ä–æ—Å: <i>{html.escape(user_query)}</i>\n"
#             f"–û—Ç–≤–µ—Ç: <i>{html.escape(response_text)}</i>"
#         )
#         await send_to_log_channel(context, log_no_answer_message, parse_mode="HTML")

#     # --- 4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –û–¢–í–ï–¢–ê –±–æ—Ç–∞ ---
#     # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, final_response_text —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º) ...
#     # response_interaction_id = database.log_interaction(
#     #     user.id, False, final_response_text, None, request_interaction_id,
#     #     kb_id_for_log, similarity_for_log
#     # )

#     # --- 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
#     # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
#     if response_interaction_id and kb_id_for_log:
#         keyboard = [[InlineKeyboardButton("üëç", callback_data=f"rate_up_{response_interaction_id}"),
#                      InlineKeyboardButton("üëé", callback_data=f"rate_down_{response_interaction_id}")]]
#         reply_markup = InlineKeyboardMarkup(keyboard)
#     elif query_category == "–ñ–∞–ª–æ–±—ã" or not best_match_item and query_category in ai_pipeline.SEARCH_KB_CATEGORIES:
#         keyboard = [[InlineKeyboardButton(
#             "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", url="...")]]
#         reply_markup = InlineKeyboardMarkup(keyboard)

#     try:
#         await update.message.reply_html(final_response_text, reply_markup=reply_markup)
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")  # Fallback –æ—Ç–ø—Ä–∞–≤–∫–∞


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_query = update.message.text
    user = update.effective_user
    chat_id = update.message.chat_id
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user.id} ({user.username}): '{user_query}'")

    retrieval_ok, generation_ok = ai_pipeline.get_ai_status()

    # --- 1. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è ---
    query_category = "–î—Ä—É–≥–æ–µ"
    if USE_LLM_CLASSIFICATION and generation_ok:
        await context.bot.send_chat_action(chat_id=chat_id, action=constants.ChatAction.TYPING)
        query_category = ai_pipeline.classify_query_type_with_llm(user_query)
    elif not generation_ok:
        query_category = "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"

    # --- 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ ---
    request_interaction_id = database.log_interaction(
        user.id, True, user_query, query_category)

    # --- 3. –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –æ—Ç–≤–µ—Ç ---
    final_response_text = ""
    kb_id_for_log = None
    similarity_for_log = None
    reply_markup = None
    best_match_item = None  # –û–±—ä—è–≤–ª—è–µ–º –∑–¥–µ—Å—å

    await context.bot.send_chat_action(chat_id=chat_id, action=constants.ChatAction.TYPING)

    # --- –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ê: –ü–æ–∏—Å–∫ –≤ –ë–∞–∑–µ –ó–Ω–∞–Ω–∏–π (CSV/PDF) ---
    if not retrieval_ok:
        final_response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞)."
    else:
        best_match_item = ai_pipeline.retrieve_context(user_query)

        if best_match_item:
            top = best_match_item[0]
            kb_id_for_log = top.get('id')
            similarity_for_log = top.get('similarity')
            data_type = top.get('data_type')
            source = top.get('source', '–ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π')
            original_content = top.get('content', '')

            if data_type == 'csv':
                logger.info(
                    f"–ù–∞–π–¥–µ–Ω –≥–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ CSV (ID: {kb_id_for_log}).")

                response_parts = [
                    f"{html.escape(original_content)}",
                    f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}"
                ]
                final_response_text = "\n".join(response_parts)

            elif data_type == 'pdf':
                logger.info(
                    f"–ù–∞–π–¥–µ–Ω —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π —á–∞–Ω–∫ PDF (ID: {kb_id_for_log}).")
                generated_answer = None
                if USE_LLM_GENERATION and generation_ok:
                    logger.info(
                        "–ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å RAG –æ—Ç–≤–µ—Ç –ø–æ PDF...")
                    generated_answer = ai_pipeline.generate_answer_with_llm(
                        user_query, best_match_item)

                if generated_answer:
                    final_response_text = generated_answer
                else:
                    logger.warning(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç LLM –ø–æ PDF, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —á–∞–Ω–∫–∞.")
                    response_parts = [f"{html.escape(original_content)}",
                                      f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}"]
                    final_response_text = "\n".join(response_parts)
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π data_type: {data_type}")
                final_response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞."

        else:
            logger.info("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ CSV/PDF –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            if USE_LLM_GENERATION and generation_ok:
                final_response_text = ai_pipeline.generate_live_response_with_llm(
                    user_query, "–î—Ä—É–≥–æ–µ")
                if not final_response_text:
                    final_response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞."
            else:
                # --- –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ë: "–ñ–∏–≤–æ–µ" –æ–±—â–µ–Ω–∏–µ ---
                logger.info(
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{query_category}' —Ç—Ä–µ–±—É–µ—Ç '–∂–∏–≤–æ–≥–æ' –æ—Ç–≤–µ—Ç–∞.")
                if USE_LLM_GENERATION and generation_ok:
                    final_response_text = ai_pipeline.generate_live_response_with_llm(
                        user_query, query_category)
                    if not final_response_text:
                        final_response_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏."
                else:
                    # Fallback –±–µ–∑ LLM
                    if query_category == "–ñ–∞–ª–æ–±—ã":
                        final_response_text = "..."
                    elif query_category == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
                        final_response_text = "..."
                    else:
                        final_response_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"

    # --- 5. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
    if response_interaction_id and kb_id_for_log:
        keyboard = [[InlineKeyboardButton("üëç", callback_data=f"rate_up_{response_interaction_id}"),
                     InlineKeyboardButton("üëé", callback_data=f"rate_down_{response_interaction_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
    elif query_category == "–ñ–∞–ª–æ–±—ã" or not best_match_item and query_category in ai_pipeline.SEARCH_KB_CATEGORIES:
        keyboard = [[InlineKeyboardButton(
            "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", url="...")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await update.message.reply_html(final_response_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ù–∞–∂–∞—Ç–∏–π –Ω–∞ –ö–Ω–æ–ø–∫–∏ (Callback) ---


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ü–µ–Ω–∫–∏)."""
    query = update.callback_query
    await query.answer()

    try:
        callback_data = query.data
        user = query.from_user
        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç {user.id} ({user.username}): {callback_data}")

        parts = callback_data.split('_')
        action = parts[0]
        rate_type = parts[1]
        item_id = parts[2] if len(parts) > 2 else "no_id"
        interaction_to_rate_id = int(parts[3]) if len(
            parts) > 3 else 0

        if action == "rate" and interaction_to_rate_id:
            rating = 1 if rate_type == "up" else -1 if rate_type == "down" else 0
            if rating != 0:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ë–î
                success = database.log_rating(
                    interaction_id=interaction_to_rate_id,
                    user_telegram_id=user.id,
                    rating_value=rating
                )

                # # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É –≤ –∫–∞–Ω–∞–ª
                # rating_text = "üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if rating == 1 else "üëé –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"
                # log_rating_message = (
                #     f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞</b>\n"
                #     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {html.escape(user.full_name)} (ID: {user.id})\n"
                #     f"–û—Ü–µ–Ω–∫–∞: {rating_text}\n"
                #     f"ID –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {interaction_to_rate_id}\n"
                #     f"ID —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: {item_id}"
                # )
                # await send_to_log_channel(context, log_rating_message, parse_mode="HTML")

                if success:
                    await query.edit_message_text(
                        text=query.message.text_html + "\n\n<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!</i>",
                        parse_mode='HTML',
                        reply_markup=None
                    )
                else:
                    await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É.", show_alert=True)

                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ü–µ–Ω–∫–∏
                    log_rating_error = (
                        f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏</b>\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {html.escape(user.full_name)} (ID: {user.id})\n"
                        f"ID –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {interaction_to_rate_id}"
                    )
                    await send_to_log_channel(context, log_rating_error, parse_mode="HTML")
            else:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏: {rate_type}")

    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data '{callback_data}': {e}")
    except Exception as e:
        logger.error(
            f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ button_callback: {e}", exc_info=True)


# async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å—Ç–æ—Ä–∏—é –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π."""
#     user = update.effective_user
#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é.")

#     # history_records = database.get_user_history(
#     #     user.id, limit=10)  # –ó–∞–ø—Ä–æ—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 "–ø–∞—Ä"

#     if not history_records:
#         await update.message.reply_text("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
#         return

#     response_text = "<b>–í–∞—à–∞ –Ω–µ–¥–∞–≤–Ω—è—è –∏—Å—Ç–æ—Ä–∏—è:</b>\n\n"
#     # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
#     # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–∫–æ–º
#     for record in history_records:
#         prefix = "üë§ –í—ã:" if record['is_from_user'] else "ü§ñ –ë–æ—Ç:"
#         timestamp_str = record['timestamp'].split(
#             '.')[0]  # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
#         # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–∞
#         safe_message = html.escape(record['message_text'])
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
#         response_text += f"<code>{timestamp_str}</code>\n{prefix} {safe_message}\n\n"
#         # –õ–∏–º–∏—Ç Telegram –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–∫–æ–ª–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
#         if len(response_text) > 3800:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
#             await update.message.reply_html(response_text)
#             response_text = ""  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

#     if response_text:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
#         await update.message.reply_html(response_text)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.critical(
            "TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    # if not LOG_CHANNEL_ID:
    #     logger.warning(
    #         "LOG_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω–æ.")

    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    database.init_db()  # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —è–¥—Ä–∞
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —è–¥—Ä–∞...")
    if not ai_pipeline.initialize_ai_core():
        logger.critical("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —è–¥—Ä–∞! –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
        return
    logger.info("AI —è–¥—Ä–æ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))
    # application.add_handler(CommandHandler("history", history_command))
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...

    # 4. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (polling)...")
    application.run_polling()
    logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    main()
