import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–∞—à–µ–≥–æ AI –º–æ–¥—É–ª—è
import ai_pipeline

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ ---
TELEGRAM_BOT_TOKEN = os.environ.get("BOT_TOKEN")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–µ–ª–∞–µ–º —ç—Ç–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ –≤–µ–∑–¥–µ) ---
log_level_str = os.environ.get("LOG_LEVEL", "INFO").upper()
log_level = getattr(logging, log_level_str, logging.INFO)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=log_level
)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ telegram
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–æ–º–∞–Ω–¥ ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n"
        f"–Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ü–æ—Ä—Ç–∞–ª—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
        # disable_web_page_preview=True # –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    help_text = (
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "- –ö–∞–∫ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é?\n"
        "- –ù—É–∂–Ω–∞ –ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?\n"
        "- –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ü–µ–ø–æ—á–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è (/history –∏ —Ç.–¥.)
    )
    await update.message.reply_text(help_text)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –°–æ–æ–±—â–µ–Ω–∏–π ---

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—â–µ—Ç –æ—Ç–≤–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ."""
    user_query = update.message.text
    user = update.effective_user
    chat_id = update.message.chat_id

    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {user.id} ({user.username}): '{user_query}'")

    if not ai_pipeline.get_ai_status():
        logger.error("AI Core –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –û—Ç–≤–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫ ---
    # corrected_query = ai_pipeline.correct_spelling(user_query)
    # search_results = ai_pipeline.find_relevant_knowledge(corrected_query)
    search_results = ai_pipeline.find_relevant_knowledge(user_query)

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç ---
    if search_results:
        # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        best_result = search_results[0]
        response_parts = []
        response_parts.append(
            f"–ù–∞—à–µ–ª –æ—Ç–≤–µ—Ç (—Å—Ö–æ–∂–µ—Å—Ç—å: {best_result['similarity']:.2f}):\n"
            # f"_(–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{corrected_query}')_\n" # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        response_parts.append(
            f"<blockquote>{best_result['text']}</blockquote>")  # –¶–∏—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç

        response_text = "\n".join(response_parts)

        # --- –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –û—Ü–µ–Ω–∫–∏ ---
        keyboard = [
            [
                InlineKeyboardButton(
                    "üëç –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_up_{best_result.get('id', 'no_id')}"),
                InlineKeyboardButton(
                    "üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", callback_data=f"rate_down_{best_result.get('id', 'no_id')}"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_html(response_text, reply_markup=reply_markup)
        log_data = {"query": user_query, "result_id": best_result.get(
            'id'), "similarity": best_result['similarity']}

    else:
        response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å."
        # --- –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ---
        keyboard = [
            # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
            [InlineKeyboardButton(
                "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", url="https://t.me/YOUR_SUPPORT_CONTACT")]
        ]
        # –ò–ª–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å callback_data="ask_operator" –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(response_text, reply_markup=reply_markup)
        log_data = {"query": user_query, "result_id": None, "similarity": 0.0}

    # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é –ë–î/—Ñ–∞–π–ª) ---
    logger.info(f"Interaction log for user {user.id}: {log_data}")
    # save_interaction_to_db(user.id, log_data) # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ù–∞–∂–∞—Ç–∏–π –Ω–∞ –ö–Ω–æ–ø–∫–∏ (Callback) ---

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ü–µ–Ω–∫–∏)."""
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–±—ç–∫

    callback_data = query.data
    user = query.from_user
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç {user.id} ({user.username}): {callback_data}")

    # –ü–∞—Ä—Å–∏–º callback_data (–ø—Ä–∏–º–µ—Ä: "rate_up_faq_1")
    parts = callback_data.split('_')
    action = parts[0]
    rate_type = parts[1] if len(parts) > 1 else None
    item_id = "_".join(parts[2:]) if len(
        parts) > 2 else None  # ID –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å '_'

    if action == "rate" and rate_type and item_id:
        rating = 1 if rate_type == "up" else -1 if rate_type == "down" else 0
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ü–µ–Ω–∏–ª –æ—Ç–≤–µ—Ç {item_id} –∫–∞–∫ {rating}")
        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤ –ë–î ---
        # save_rating_to_db(user.id, item_id, rating) # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è

        # –ú–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±—Ä–∞–≤ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!"
        await query.edit_message_text(text=query.message.text_html + "\n\n<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!</i>", parse_mode='HTML')
        # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        # await query.edit_message_reply_markup(reply_markup=None)

    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (ask_operator –∏ —Ç.–¥.)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.critical(
            "TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        return

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —è–¥—Ä–∞
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —è–¥—Ä–∞...")
    if not ai_pipeline.initialize_ai_core():
        logger.critical("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —è–¥—Ä–∞! –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
        return
    logger.info("AI —è–¥—Ä–æ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...

    # 4. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (polling)...")
    application.run_polling()
    logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    main()
